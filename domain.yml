version: "3.1"
intents:
  - affirm
  - automata_definition
  - bot_challenge
  - deny
  - deterministic_finite_automata_definition
  - finite_automata_definition
  - finite_automata_types
  - goodbye
  - greet
  - mood_great
  - mood_unhappy
  - extend_state_transition_function
  - language_accepted_by_DFA
  - definition_NFA
  - equivalent_between_NFA_and_DFA
  - definition_NFA_with_epsilon
  - calculate_epsilon_closure
  - language_accepted_by_nfa_epsilon
  - equivalent_between_nfaε_with_nfa
responses:
  utter_greet:
    - custom:
        metadata:
          - type: text
            data: string
          - type: ul
            data:
              - buoc 1
              - buoc 2
              - buoc 3
          - type: image
            data: https://images.template.net/home/13/3ceea7ca-1e12-46c3-9cac-e0a16ba9432c.png
  utter_cheer_up:
    - custom:
        metadata:
          - type: text
            data: "Here is something to cheer you up:"
  utter_did_that_help:
    - custom:
        metadata:
          - type: text
            data: Did that help you?
  utter_happy:
    - custom:
        metadata:
          - type: text
            data: Great, carry on!
  utter_goodbye:
    - custom:
        metadata:
          - type: text
            data: Bye
  utter_iamabot:
    - custom:
        metadata:
          - type: text
            data: I am a bot, powered by Rasa.
  utter_automata_definition:
    - custom:
        metadata:
          - type: text
            data: "- Automata là một khái niệm trong lĩnh vực khoa học máy tính và toán học, thường được sử dụng để mô hình hóa hệ thống tự động hoặc quy trình tự động. Một automaton (còn được gọi là máy tự động) là một mô hình trừu tượng của một hệ thống có thể tự động thực hiện một loạt các hành động hoặc chuyển đổi giữa các trạng thái khác nhau dựa trên đầu vào nhất định."
  utter_finite_automata_definition:
    - custom:
        metadata:
          - type: text
            data: "- Ôtômát hữu hạn (FA) là một mô hình tính toán của hệ thống với sự mô tả bởi các input và output. Tại mỗi thời điểm, hệ thống có thể được xác định ở một trong số hữu hạn các cấu hình nội bộ gọi là các trạng thái (states). Mỗi trạng thái của hệ thống thể hiện sự tóm tắt các thông tin liên quan đến những input đã chuyển qua và xác định các phép chuyển kể tiếp trên dãy input tiếp theo."
  utter_finite_automata_types:
    - custom:
        metadata:
          - type: text
            data: "- Có 2 loại Ôtômát hữu hạn (FA) là: đơn định (DFA) và không đơn định (NFA)"
  utter_deterministic_finite_automata_definition:
    - custom:
        metadata:
          - type: text
            data: "- Một ôtômát hữu hạn đơn định (DFA) - gọi tắt là FA -gồm một tập hữu hạn các trạng thái và một tập các phép chuyển từ trạng thái này tới trạng thái khác trên các ký hiệu nhập (input symbols) được chọn từ một bộ chữ cái 2 nào đó. Mỗi ký hiệu nhập có đúng một phép chuyển khỏi mỗi trạng thái (có thể chuyển trở về chính nó). Một trạng thái, thường ký hiệu là q0, gọi là trạng thái bắt đầu (trạng thái ôtômát bắt đầu). Một số trạng thái được thiết kế như là các trạng thái kết thúc hay trạng thái chấp nhận."
          - type: text
            data: "- Dưới đây là hình ảnh ví dụ về sơ đồ chuyển của một DFA:"
          - type: image
            data: https://res.cloudinary.com/ndd1611/image/upload/v1706001365/images_chatbot_LV/DFA_1_jwkyxq.png
          - type: text
            data: "- Một cách hình thức ta định nghĩa ôtômata hữu hạn là bộ phận gồm 5 thành phần (Q, Σ, δ, q0, F) trong đó:"
          - type: ul
            data:
              - "Q là tập hợp hữu hạn các trạng thái."
              - "Σ là bộ chữ cái nhập hữu hạn."
              - "δ là hàm chuyển ánh xạ từ QxΣ -> Q, tức là một trạng thái được cho bởi phép chuyển từ trạng thái q trên ký hiệu nhập a."
              - "q0 ∈ Q là trạng thái bắt đầu."
              - "F ∈ Q là trạng thái kết thúc."
          - type: suggest
            data:
              - "Hàm chuyển trạng thái mở rộng"
              - "Ngôn ngữ được chấp nhận bởi DFA"
  utter_extend_state_transition_function:
    - custom:
        metadata:
          - type: text
            data: "- Để có thể mô tả một cách hình thức hoạt động của một DFA trên chuỗi, ta mở rộng hàm chuyển δ để áp dụng đối với một trạng thái trên từng ký hiệu. Ta định nghĩa hàm chuyển δ như một ánh xạ từ QxΣ* -> Q với ý nghĩa δ(q, w) là trạng thái DFA chuyển đổi đến từ trạng thái q trên chuỗi w. Một cách hình thức, ta định nghĩa:"
          - type: text
            data: "1. δ(q, ε) = q"
          - type: text
            data: "2. δ(q, wa) = δ(δ(q, w), a), với mọi chuỗi w và ký hiệu nhập a."
          - type: text
            data: "- Một số quy ước về ký hiệu:"
          - type: ul
            data:
              - "Q là tập các trạng thái. Ký hiệu q và p (có hoặc không cso chỉ số) là các trạng thái, q0 là trạng thái bắt đầu."
              - "Σ là bộ chữ cái nhập. Ký hiệu a, b (có hoặc không có chỉ số) và các chữ số là các ký hiệu nhập."
              - "δ là hàm chuyển."
              - "F là tập các trạng thái kết thúc."
              - "w, x, y và z (có hoặc không có chỉ số) là các chuỗi ký hiệu nhập."
  utter_language_accepted_by_DFA:
    - custom:
        metadata:
          - type: text
            data: "- Một chuỗi w được chấp nhận bởi ôtômát hữu hạn M (Q, Σ, δ, q0, F) nếu δ(q0, w) = p với p ∈ F. Ngôn ngữ được chấp nhận bởi M, ký hiệu L(M) là tập hợp:"
          - type: textMiddle
            data: "L(M) = { w | δ(q0, w) ∈ F}"
          - type: text
            data: "- Duới đây là vi dụ kiểm tra xem ngôn ngữ có được chấp nhận bởi DFA không."
          - type: image
            data: https://res.cloudinary.com/ndd1611/image/upload/v1706001365/images_chatbot_LV/DFA_1_jwkyxq.png
          - type: text
            data: "- Xét sơ đồ chuyển trên. Theo khái niệm hình thức, ta có DFA được xác định bởi M(Q, Σ, δ, q0, F), trong đó:"
          - type: ul
            data:
              - "Q = {q0, q1, q2, q3}"
              - "Σ = {0, 1}"
              - "F = {q0}"
          - type: text
            data: "- Ta có hàm chuyển như sau:"
          - type: tableTransition
            data:
              - tr:
                  - "Trạng thái"
                  - "0"
                  - "1"
              - tr:
                  - "q0"
                  - "q2"
                  - "q1"
              - tr:
                  - "q1"
                  - "q3"
                  - "q0"
              - tr:
                  - "q2"
                  - "q0"
                  - "q3"
              - tr:
                  - "q3"
                  - "q1"
                  - "q2"
          - type: text
            data: "Giả sử chuỗi w = 110101 được nhập vào M."
          - type: text
            data: "Ta có δ(q0, 1) = q1 và δ(q1, 1) = q0, vậy:"
          - type: textMiddle
            data: "δ(q0, 11) = δ(δ(q0, 1), 1) = δ(q1, 1) = q0."
          - type: text
            data: "Tiếp tục δ(q0, 0) = q2, vậy δ(q0, 110) = δ(δ(q0, 11), 0) = q2."
          - type: text
            data: "Tiếp tục ta có  δ(q0, 1101) = q3, δ(q0, 11010) = q1."
          - type: text
            data: "Và cuối cùng δ(q0, 110101) = q0 ∈ F"
          - type: text
            data: "Vậy 110101 thuộc L(M). Ta có thể chứng minh rằng L(M) là tập mọi chuỗi có số chẵn số 0 và số chẵn số 1."
  utter_NFA_definition:
    - custom:
        metadata:
          - type: text
            data: Xét một dạng sửa đổi mô hình DFA để chấp nhận không, một hoặc nhiều hơn một phép chuyển từ một trạng thái trên cùng một kí hiệu nhập. Mô hình mới này gọi là ôtômát hữu hạn không đơn định NFA (Nondeterministic Finite Automata).
          - type: text
            data: Một chuỗi ký hiệu nhập a1, a2, a3,... được chấp nhận bởi một NFA nếu có tồn tại một chuỗi các phép chuyển, tương ứng với chuỗi nhập, từ trạng thái bắt đầu đến trạng thái kết thúc. Chẳng hạn chuỗi 01001 được chấp nhận bởi ôtômát trong hình dưới đây vì có chuỗi phép chuyển qua các trạng thái q0, q1, q2, q3, q4 có nhãn tương ứng là 0, 1, 0, 0, 1. NFA này chấp nhận tất cả các chuỗi có 2 số 0 liên tiếp hoặc hai số một liên tiếp.
          - type: text
            data: "Sơ đồ chuyển của một NFA:"
          - type: image
            data: https://res.cloudinary.com/ndd1611/image/upload/v1708583167/images_chatbot_LV/NFA_1_rusmti.png
          - type: text
            data: "- Xét sơ đồ chuyển trên. Theo khái niệm hình thức, ta có NFA được xác định bởi M(Q, Σ, δ, q0, F), trong đó:"
          - type: ul
            data:
              - "Q = {q0, q1, q2, q3, q4}"
              - "Σ = {0, 1}"
              - "F = {q2, q4}"
          - type: text
            data: "Xét chuỗi nhập w = 110101"
          - type: text
            data: "Ta có δ(q0, 0) =  {q0, q3}"
          - type: text
            data: "δ(q0, 01) = δ(δ(q0, 0), 1) = δ({q0, q3}, 1) = δ(q0, 1) U δ(q3, 1) = {q0, q1} "
          - type: text
            data: "Tương tự ta có thể tính:"
          - type: text
            data: "δ(q0, 010) = {q0, q3}."
          - type: text
            data: "δ(q0, 0100) = {q0, q3, q4}."
          - type: text
            data: "δ(q0, 01001) = {q0, q1, q4}."
          - type: text
            data: "Do q4 ∈ F nên w thuộc L(M)"
  utter_equivalent_between_NFA_and_DFA:
    - custom:
        metadata:
          - type: text
            data: "Vì mỗi DFA là một NFA, nên lớp ngôn ngữ được chấp nhận bởi NFA cũng bao gồm các tập chính quy (đây chính là ngôn ngữ được chấp nhận bởi DFA). Tuy nhiên không có cơ sở nào để nỏi rằng NFA chỉ chấp nhận duy nhất các tập hợp này. Điều đó cho thấy DFA có thể mô phỏng hoạt động của NFA, nghĩa là với mỗi NFA ta có thể xây dựng một DFA tương đương (chấp nhận cùng một ngôn ngữ với nó). Đặt một DFA mô phỏng hoạt động của NFA là cho phép các trạng thái của DFA tương ứng với tập trạng thái của NFA. Tại mỗi thời điểm DFA lưu trữ trong bô điều khiển tất cả các trạng thái mà NFA có thể chuyển đến khi đọc cùng một input như DFA."
  utter_definition_nfa_epsilon:
    - custom:
        metadata:
          - type: text
            data: "Một mô hình NFA cho phép các phép chuyển trên nhãn rỗng ε là NFA với ε-dịch chuyển (NFAε)."
          - type: text
            data: "Dưới đây là một NFA với ε-dịch chuyển"
          - type: image
            data: https://res.cloudinary.com/ndd1611/image/upload/v1708586351/images_chatbot_LV/NFA_epsilon_wetwpf.png
  utter_epsilon_closure:
    - custom:
      metadata:
        - type: image
          data: https://res.cloudinary.com/ndd1611/image/upload/v1708586351/images_chatbot_LV/NFA_epsilon_wetwpf.png
        - type: text
          data: "Trong hình trên ε-CLOSURE(q0) = {q0, q1, q2} vì đường đi chỉ có một đỉnh q0 (không có cung trên đường đi) là đường đi từ q0 đến q0 có tất cả các cạnh nhãn là ε. đường đi q0, q1 chỉ ra rằng q1 thuộc ε-CLOSURE(q0) và đường đi q0, q1, q2 chỉ ra rằng q2 thuộc ε-CLOSURE(q0)."
  utter_language_accepted_by_nfa_epsilon:
    - custom:
      metadata:
        - type: image
          data: https://res.cloudinary.com/ndd1611/image/upload/v1708586351/images_chatbot_LV/NFA_epsilon_wetwpf.png
        - type: text
          data: "Xét sơ đồ chuyển của hình trên, theo khái niệm hình thức, ta có NFA M({q0, q1, q2}, {0, 1, 2}, δ, q0, {q2}) với hàm δ như sau:"
        - type: text
          data: "Trong hình trên ε-CLOSURE(q0) = {q0, q1, q2} vì đường đi chỉ có một đỉnh q0 (không có cung trên đường đi) là đường đi từ q0 đến q0 có tất cả các cạnh nhãn là ε. đường đi q0, q1 chỉ ra rằng q1 thuộc ε-CLOSURE(q0) và đường đi q0, q1, q2 chỉ ra rằng q2 thuộc ε-CLOSURE(q0)."
        - type: tableTransition
          data:
            - tr:
                - "Trạng thái"
                - "0"
                - "1"
                - "2"
                - "ε"
            - tr:
                - "q0"
                - "{q0}"
                - "∅"
                - "∅"
                - "{q1}"
            - tr:
                - "q1"
                - "∅"
                - "{q1}"
                - "∅"
                - "{q1}"
            - tr:
                - "q2"
                - "∅"
                - "∅"
                - "{q2}"
                - "∅"
        - type: text
          data: "Xét chuỗi nhập w = 012"
        - type: text
          data: "Ta cần tính δ*(q0, 012)"
        - type: text
          data: "Ta có: δ*(q0, ε) = ε-CLOSURE(q0) = {q0, q1, q2}"
        - type: text
          data: "Vậy δ*(q0, ε) = ε-CLOSURE(δ(δ*(q0, ε), 0))"
        - type: text
          data: "= ε-CLOSURE(δ({q0, q1, q2}, 0))"
        - type: text
          data: "= ε-CLOSURE(δ(q0, 0) U δ(q1, 0) U δ(q2, 0))"
        - type: text
          data: "= ε-CLOSURE({q0} U ∅ U ∅)"
        - type: text
          data: "= ε-CLOSURE({q0}) = {q0, q1, q2}"
        - type: text
          data: "và δ*(q0, 01) = ε-CLOSURE(δ(δ*(q0, 0), 1))"
        - type: text
          data: "= ε-CLOSURE(δ({q0, q1, q2},1))"
        - type: text
          data: "= ε-CLOSURE(δ(q0, 1) U δ(q1, 1) U δ(q2, 1))"
        - type: text
          data: "= ε-CLOSURE(∅ U {q1} U ∅)"
        - type: text
          data: "= ε-CLOSURE({q1}) = {q1, q2}"
        - type: text
          data: "=> δ*(q0, 012) = ε-CLOSURE(δ(δ*(q0, 01), 2))"
        - type: text
          data: "= ε-CLOSURE(δ({q1, q2}, 2))"
        - type: text
          data: "= ε-CLOSURE(δ(q1, 2) U δ(q2, 2))"
        - type: text
          data: "= ε-CLOSURE(∅ U {q2})"
        - type: text
          data: "= ε-CLOSURE({q2}) = {q2}"
        - type: text
          data: "Do δ*(q0, 012) có chứa trạng thái q2 ∈ F nên chuỗi w ∈ L(M)."
  utter_equivalent_between_nfaε_with_nfa:
    - custom:
      metadata:
        - type: text
          data: "Tương tự như NFA, khả năng có thể thực hiện phép chuyển trên nhãn ε của NFAε cũng không làm cho NFAε chấp nhận được các tập hợp chính quy. Ta có thể dẫn chứng điều này bằng cách mô phỏng hoạt động của một NFAε bởi một NFA không có ε-dịch chuyển."

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
